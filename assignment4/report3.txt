## report3.txt 

Using two images, with dimensions: 
    Image1 - (H,W,C) = (480, 640, 3) beatles.jpg
    Image2 - (H,W,C) = (402, 721, 3) zebra.jpg 
    
Runtime: 
    Image1: 
    Python: 3.82 s ± 103 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
    Numpy: 30.1 ms ± 4.17 ms per loop (mean ± std. dev. of 7 runs, 10 loops each) 
    Numba: 9.09 ms ± 949 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

    
    Image2: 
    Python: 3.43 s ± 34.2 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)
    Numpy: 24.4 ms ± 1.61 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
    Numba: 7.7 ms ± 147 µs per loop (mean ± std. dev. of 7 runs, 1 loop each) 
    
By changing to Numba from Numpy it is observed that the speedup is even higher. For very demanding computations this can have a significant difference, but for the computations like this assignment it might be better to use numpy. Numba can be difficult to debug because numba is black box optimized in the background. At the same time Numba is highly automated and simple to use, the minor investment of annotating the code can give significant improvement in execution time. 

Speedup gained from python to vectorized: 
    Image2 - (3.43-0.024)/0.024 = 141.9% gained 
    Image1 - (3.82-0.03)/0.03 = 126.3% gained 
    
Speedup gained from python to numba:  
    Image2 - (3.43-0.0077)/0.0077 = 444.5% gained 
    Image1 - (3.82-0.009)/0.009 = 423% gained  
   
Speedup gained from numpy to numba:  
    Image2 - (0.024-0.0077)/0.0077 = 2.1% gained 
    Image1 - (0.03-0.009)/0.009 = 2.3% gained  






